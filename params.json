{
  "name": "Rust autoloader",
  "tagline": "A Python based autoloader that compiles and runs rust files in your current directory",
  "body": "Rust Autoloader\r\n================\r\n\r\n[![Downloads](https://pypip.in/download/rust-autoloader/badge.svg)](https://pypi.python.org/pypi/rust-autoloader/)\r\n[![Supported Python versions](https://pypip.in/py_versions/rust-autoloader/badge.svg)](https://pypi.python.org/pypi/rust-autoloader/)\r\n\r\n\r\nThis script detects any changes made to the rust files (`.rs`)\r\nin current working directory and serves as an *autoloader* for your development.\r\n\r\nUse this when you are learning rust/testing/editing rust files and\r\nyou're tired of doing `rustc test.rs` and `./test` over and over again.\r\n\r\nInstallation\r\n=============\r\n\r\n    $ pip install rust-autoloader\r\n\r\nUsage\r\n======\r\n\r\n    from rust_autoloder import run\r\n    run(\"path-to-working-directory\")\r\n\r\nYou can also take the `autoloader.py` script and keep it running in the working\r\ndirectory using `python autoloader.py` while working.\r\n\r\nNOTE\r\n=====\r\n\r\n* This script is not meant to be any kind of substitute for `cargo build`.  Use this only when you're toying on some `.rs` files and don't use it in any serious project.\r\n<br/>\r\n* Doesn't play well with compiler warnings (yet). (One has to execute manually if warnings are generated).\r\n<br/>\r\n* Not possible to pass input to your rust program (yet).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}